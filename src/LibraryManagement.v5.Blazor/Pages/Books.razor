@page "/books"
@using LibraryManagement.v5.Permissions
@using Volo.Abp
@using Volo.Abp.Application.Dtos
@using LibraryManagement.v5.Books
@using LibraryManagement.v5.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web
@using LibraryManagement.v5.Authors
@inject IStringLocalizer<v5Resource> L
@inject AbpBlazorMessageLocalizerHelper<v5Resource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateBookDto>

<Card>


   

    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Books"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">

               @*

@if (HasCreatePermission)

               *@ 

                {
                    <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">@L["NewBook"]</Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>

        

        <div class="form-group">
            <input placeholder="Search..." type="text" name="text"
                   class="form-control form-control-lg"
                   @bind="searchText" @oninput="@(async (e) => await SearchBooksAsync(e))" />
        </div>


        
        



        <DataGrid TItem="BookDto"
                  Data="filteredBooks"
                  ReadData="OnDataGridReadAsync"
                  CurrentPage="CurrentPage"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="BookDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="BookDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="BookDto"
                                          Text="@L["Edit"]"
                                          Visible=HasUpdatePermission
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="BookDto"
                                          Text="@L["Delete"]"
                                          Visible=HasDeletePermission
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>


                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>

               


                            <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.AuthorName)"
                                Caption="@L["Author"]"></DataGridColumn>

               


                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Type)"
                                Caption="@L["Type"]">
                    <DisplayTemplate>
                        @L[$"Enum:BookType.{context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>


                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.PublishDate)"
                                Caption="@L["PublishDate"]">
                    <DisplayTemplate>
                        @context.PublishDate.ToShortDateString()
                    </DisplayTemplate>

                </DataGridColumn>


           


                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.Shelf)"
                                Caption="@L["Shelf"]"></DataGridColumn>

                <DataGridColumn TItem="BookDto"
                                Field="@nameof(BookDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                       @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewBook"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                  
                    <Validation MessageLocalizer="@LH.Localize">

                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                    @*yeni fieldı buraya ekledik*@


                    <Field>
                        <FieldLabel>@L["Author"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewEntity.AuthorId">
                            @foreach (var author in authorList)
                            {
                                <SelectItem TValue="Guid" Value="@author.Id">
                                    @author.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    

                    



                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="BookType" @bind-SelectedValue="@NewEntity.Type">
                            @foreach (int bookTypeValue in Enum.GetValues(typeof(BookType)))
                            {
                                <SelectItem TValue="BookType" Value="@((BookType) bookTypeValue)">
                                    @L[$"Enum:BookType.{bookTypeValue}"]
                                </SelectItem>
                            }
                        </Select>

                        @* // foreach dönüyor new book listeyi dolduyor burda *@


                    </Field>
                    <Field>
                        <FieldLabel>@L["PublishDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.PublishDate"/>
                    </Field>


                    

                    <Validation MessageLocalizer="@LH.Localize">

                        <Field>
                            <FieldLabel>@L["Shelf"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Shelf">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>



                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">


                    


                     <Field>
                        <FieldLabel>@L["Author"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.AuthorId">
                            @foreach (var author in authorList)
                            {
                                <SelectItem TValue="Guid" Value="@author.Id">
                                    @author.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>

                    
                   


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="BookType" @bind-SelectedValue="@EditingEntity.Type">
                            @foreach (int bookTypeValue in Enum.GetValues(typeof(BookType)))
                            {
                                <SelectItem TValue="BookType" Value="@((BookType) bookTypeValue)">
                                    @L[$"Enum:BookType.{bookTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["PublishDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="EditingEntity.PublishDate"/>
                    </Field>


                    

                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Shelf"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Shelf">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>





@code
{

    private string searchText = "";
    private IReadOnlyList<BookDto> filteredBooks = Array.Empty<BookDto>();
    IReadOnlyList<AuthorLookupDto> authorList = Array.Empty<AuthorLookupDto>();

    public Books() // Constructor
    {
        CreatePolicyName = v5Permissions.Books.Create;
        UpdatePolicyName = v5Permissions.Books.Edit;
        DeletePolicyName = v5Permissions.Books.Delete;

        LocalizationResource = typeof(v5Resource);
    }

   /*
    * protected override async Task OnInitializedAsync()
    * 
    {
        await SetPermissionsAsync();
        await LoadBooksAsync();
        // shelfleri de yüklesek fena olmaz
    }
    * */ 

    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
        await LoadBooksAsync();
        await base.OnInitializedAsync();
        authorList = (await AppService.GetAuthorLookupAsync()).Items;
    }



    private async Task SearchBooksAsync(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        if (string.IsNullOrEmpty(searchText))
        {
            // Reset to all books if search text is empty
            filteredBooks = Entities;
            return;
        }
        filteredBooks = Entities.Where(book => book.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                                                book.AuthorName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)   )
                                  .ToList(); // Create a filtered copy
    }
    private async Task LoadBooksAsync()
    {
        var result = await AppService.GetListAsync(new PagedAndSortedResultRequestDto());
        Entities = result.Items;
        filteredBooks = Entities; // Initially show all books
    }


    protected override async Task OpenCreateModalAsync()
    {
        if (!authorList.Any())
        {
            throw new UserFriendlyException(message: L["AnAuthorIsRequiredForCreatingBook"]);
        }

        await base.OpenCreateModalAsync();
        NewEntity.AuthorId = authorList.First().Id;
    }


}